module.cloudrun.data.google_iam_policy.noauth: Reading...
module.project.data.google_billing_account.acct: Reading...
module.cloudrun.data.google_iam_policy.noauth: Read complete after 0s [id=3450855414]
module.project.data.google_billing_account.acct: Read complete after 1s [id=0147B7-2560AC-CA1A2B]

Terraform used the selected providers to generate the following execution
plan. Resource actions are indicated with the following symbols:
  + create
 <= read (data resources)

Terraform will perform the following actions:

  # module.cloudrun.google_cloud_run_service.default will be created
  + resource "google_cloud_run_service" "default" {
      + autogenerate_revision_name = true
      + id                         = (known after apply)
      + location                   = "us-central1"
      + name                       = "production-backend-api"
      + project                    = "my-gcp-project-prod-543224"
      + status                     = (known after apply)

      + metadata (known after apply)

      + template {
          + metadata {
              + annotations      = (known after apply)
              + generation       = (known after apply)
              + labels           = (known after apply)
              + name             = (known after apply)
              + namespace        = (known after apply)
              + resource_version = (known after apply)
              + self_link        = (known after apply)
              + uid              = (known after apply)
            }
          + spec {
              + container_concurrency = (known after apply)
              + service_account_name  = "cloudrun-sa-prod@my-gcp-project-prod-543224.iam.gserviceaccount.com"
              + serving_state         = (known after apply)
              + timeout_seconds       = (known after apply)

              + containers {
                  + image = "gcr.io/my-gcp-project-prod-12345/backend-api:v1.2.3"
                  + name  = "backend-api-container"

                  + env {
                      + name  = "DB_HOST"
                      + value = (known after apply)
                    }
                  + env {
                      + name  = "DB_NAME"
                      + value = "production-app-db"
                    }
                  + env {
                      + name  = "DB_PASSWORD"
                        # (1 unchanged attribute hidden)

                      + value_from {
                          + secret_key_ref {
                              + key  = "latest"
                              + name = "db_password"
                            }
                        }
                    }
                  + env {
                      + name  = "DB_PORT"
                      + value = "5432"
                    }
                  + env {
                      + name  = "DB_USER"
                      + value = "teamavail"
                    }

                  + ports {
                      + container_port = 8080
                      + name           = (known after apply)
                    }

                  + resources (known after apply)

                  + startup_probe (known after apply)
                }
            }
        }

      + traffic (known after apply)
    }

  # module.cloudrun.google_cloud_run_service_iam_policy.noauth will be created
  + resource "google_cloud_run_service_iam_policy" "noauth" {
      + etag        = (known after apply)
      + id          = (known after apply)
      + location    = "us-central1"
      + policy_data = jsonencode(
            {
              + bindings = [
                  + {
                      + members = [
                          + "allUsers",
                        ]
                      + role    = "roles/run.invoker"
                    },
                ]
            }
        )
      + project     = "my-gcp-project-prod-543224"
      + service     = "production-backend-api"
    }

  # module.firewall.google_compute_firewall.sql_firewall will be created
  + resource "google_compute_firewall" "sql_firewall" {
      + creation_timestamp = (known after apply)
      + destination_ranges = (known after apply)
      + direction          = (known after apply)
      + enable_logging     = (known after apply)
      + id                 = (known after apply)
      + name               = "production-app-firewall"
      + network            = "production-app-network"
      + priority           = 1000
      + project            = "my-gcp-project-prod-543224"
      + self_link          = (known after apply)
      + source_ranges      = [
          + "0.0.0.0/0",
        ]
      + target_tags        = [
          + "sql",
        ]

      + allow {
          + ports    = [
              + "5432",
              + "443",
            ]
          + protocol = "tcp"
        }
    }

  # module.iam.google_project_iam_member.sa_roles["roles/cloudsql.client"] will be created
  + resource "google_project_iam_member" "sa_roles" {
      + etag    = (known after apply)
      + id      = (known after apply)
      + member  = "serviceAccount:cloudrun-sa-prod@my-gcp-project-prod-543224.iam.gserviceaccount.com"
      + project = "my-gcp-project-prod-543224"
      + role    = "roles/cloudsql.client"
    }

  # module.iam.google_project_iam_member.sa_roles["roles/logging.logWriter"] will be created
  + resource "google_project_iam_member" "sa_roles" {
      + etag    = (known after apply)
      + id      = (known after apply)
      + member  = "serviceAccount:cloudrun-sa-prod@my-gcp-project-prod-543224.iam.gserviceaccount.com"
      + project = "my-gcp-project-prod-543224"
      + role    = "roles/logging.logWriter"
    }

  # module.iam.google_project_iam_member.sa_roles["roles/monitoring.metricWriter"] will be created
  + resource "google_project_iam_member" "sa_roles" {
      + etag    = (known after apply)
      + id      = (known after apply)
      + member  = "serviceAccount:cloudrun-sa-prod@my-gcp-project-prod-543224.iam.gserviceaccount.com"
      + project = "my-gcp-project-prod-543224"
      + role    = "roles/monitoring.metricWriter"
    }

  # module.iam.google_project_iam_member.sa_roles["roles/secretmanager.secretAccessor"] will be created
  + resource "google_project_iam_member" "sa_roles" {
      + etag    = (known after apply)
      + id      = (known after apply)
      + member  = "serviceAccount:cloudrun-sa-prod@my-gcp-project-prod-543224.iam.gserviceaccount.com"
      + project = "my-gcp-project-prod-543224"
      + role    = "roles/secretmanager.secretAccessor"
    }

  # module.iam.google_service_account.cloudrun will be created
  + resource "google_service_account" "cloudrun" {
      + account_id   = "cloudrun-sa-prod"
      + disabled     = false
      + display_name = "Cloud Run Service Account"
      + email        = "cloudrun-sa-prod@my-gcp-project-prod-543224.iam.gserviceaccount.com"
      + id           = (known after apply)
      + member       = "serviceAccount:cloudrun-sa-prod@my-gcp-project-prod-543224.iam.gserviceaccount.com"
      + name         = (known after apply)
      + project      = "my-gcp-project-prod-543224"
      + unique_id    = (known after apply)
    }

  # module.load-balancer.google_compute_backend_service.default will be created
  + resource "google_compute_backend_service" "default" {
      + connection_draining_timeout_sec = 0
      + creation_timestamp              = (known after apply)
      + fingerprint                     = (known after apply)
      + generated_id                    = (known after apply)
      + id                              = (known after apply)
      + load_balancing_scheme           = "EXTERNAL"
      + name                            = "production-backend-api-backend"
      + port_name                       = "http"
      + project                         = "my-gcp-project-prod-543224"
      + protocol                        = "HTTP"
      + self_link                       = (known after apply)
      + session_affinity                = (known after apply)
      + timeout_sec                     = 30

      + backend {
          + balancing_mode               = "UTILIZATION"
          + capacity_scaler              = 1
          + group                        = (known after apply)
          + max_connections              = (known after apply)
          + max_connections_per_endpoint = (known after apply)
          + max_connections_per_instance = (known after apply)
          + max_rate                     = (known after apply)
          + max_rate_per_endpoint        = (known after apply)
          + max_rate_per_instance        = (known after apply)
          + max_utilization              = (known after apply)
            # (2 unchanged attributes hidden)
        }

      + cdn_policy (known after apply)

      + iap (known after apply)

      + log_config (known after apply)
    }

  # module.load-balancer.google_compute_global_address.lb_ip will be created
  + resource "google_compute_global_address" "lb_ip" {
      + address            = (known after apply)
      + creation_timestamp = (known after apply)
      + effective_labels   = {
          + "goog-terraform-provisioned" = "true"
        }
      + id                 = (known after apply)
      + label_fingerprint  = (known after apply)
      + name               = "production-backend-api-lb-ip"
      + prefix_length      = (known after apply)
      + project            = "my-gcp-project-prod-543224"
      + self_link          = (known after apply)
      + terraform_labels   = {
          + "goog-terraform-provisioned" = "true"
        }
    }

  # module.load-balancer.google_compute_global_forwarding_rule.default will be created
  + resource "google_compute_global_forwarding_rule" "default" {
      + base_forwarding_rule  = (known after apply)
      + effective_labels      = (known after apply)
      + forwarding_rule_id    = (known after apply)
      + id                    = (known after apply)
      + ip_address            = (known after apply)
      + ip_protocol           = (known after apply)
      + label_fingerprint     = (known after apply)
      + load_balancing_scheme = "EXTERNAL"
      + name                  = "production-backend-api-lb-forwarding-rule"
      + network               = (known after apply)
      + network_tier          = (known after apply)
      + port_range            = "80"
      + project               = "my-gcp-project-prod-543224"
      + psc_connection_id     = (known after apply)
      + psc_connection_status = (known after apply)
      + self_link             = (known after apply)
      + subnetwork            = (known after apply)
      + target                = (known after apply)
      + terraform_labels      = (known after apply)

      + service_directory_registrations (known after apply)
    }

  # module.load-balancer.google_compute_region_network_endpoint_group.cloud_run_neg will be created
  + resource "google_compute_region_network_endpoint_group" "cloud_run_neg" {
      + id                    = (known after apply)
      + name                  = "production-backend-api-neg"
      + network               = (known after apply)
      + network_endpoint_type = "SERVERLESS"
      + project               = "my-gcp-project-prod-543224"
      + region                = "us-central1"
      + self_link             = (known after apply)

      + cloud_run {
          + service = "production-backend-api"
        }

      + psc_data (known after apply)
    }

  # module.load-balancer.google_compute_target_http_proxy.default will be created
  + resource "google_compute_target_http_proxy" "default" {
      + creation_timestamp = (known after apply)
      + fingerprint        = (known after apply)
      + id                 = (known after apply)
      + name               = "production-backend-api-lb-http-proxy"
      + project            = "my-gcp-project-prod-543224"
      + proxy_bind         = (known after apply)
      + proxy_id           = (known after apply)
      + self_link          = (known after apply)
      + url_map            = (known after apply)
    }

  # module.load-balancer.google_compute_url_map.default will be created
  + resource "google_compute_url_map" "default" {
      + creation_timestamp = (known after apply)
      + default_service    = (known after apply)
      + fingerprint        = (known after apply)
      + id                 = (known after apply)
      + map_id             = (known after apply)
      + name               = "production-backend-api-lb-url-map"
      + project            = "my-gcp-project-prod-543224"
      + self_link          = (known after apply)
    }

  # module.network.google_compute_network.vpc will be created
  + resource "google_compute_network" "vpc" {
      + auto_create_subnetworks                   = false
      + bgp_always_compare_med                    = (known after apply)
      + bgp_best_path_selection_mode              = (known after apply)
      + bgp_inter_region_cost                     = (known after apply)
      + delete_default_routes_on_create           = false
      + gateway_ipv4                              = (known after apply)
      + id                                        = (known after apply)
      + internal_ipv6_range                       = (known after apply)
      + mtu                                       = (known after apply)
      + name                                      = "production-app-network"
      + network_firewall_policy_enforcement_order = "AFTER_CLASSIC_FIREWALL"
      + network_id                                = (known after apply)
      + numeric_id                                = (known after apply)
      + project                                   = "my-gcp-project-prod-543224"
      + routing_mode                              = (known after apply)
      + self_link                                 = (known after apply)
    }

  # module.network.google_compute_subnetwork.subnet1 will be created
  + resource "google_compute_subnetwork" "subnet1" {
      + creation_timestamp         = (known after apply)
      + external_ipv6_prefix       = (known after apply)
      + fingerprint                = (known after apply)
      + gateway_address            = (known after apply)
      + id                         = (known after apply)
      + internal_ipv6_prefix       = (known after apply)
      + ip_cidr_range              = "10.0.0.0/16"
      + ipv6_cidr_range            = (known after apply)
      + ipv6_gce_endpoint          = (known after apply)
      + name                       = "production-app-subnet"
      + network                    = (known after apply)
      + private_ip_google_access   = (known after apply)
      + private_ipv6_google_access = (known after apply)
      + project                    = "my-gcp-project-prod-543224"
      + purpose                    = (known after apply)
      + region                     = "us-central1"
      + self_link                  = (known after apply)
      + stack_type                 = (known after apply)
      + state                      = (known after apply)
      + subnetwork_id              = (known after apply)

      + secondary_ip_range (known after apply)
    }

  # module.project.google_project.my_project will be created
  + resource "google_project" "my_project" {
      + auto_create_network = true
      + billing_account     = "0147B7-2560AC-CA1A2B"
      + deletion_policy     = "DELETE"
      + effective_labels    = {
          + "goog-terraform-provisioned" = "true"
        }
      + id                  = (known after apply)
      + name                = "production-app"
      + number              = (known after apply)
      + project_id          = "my-gcp-project-prod-543224"
      + terraform_labels    = {
          + "goog-terraform-provisioned" = "true"
        }
    }

  # module.project.google_project_service.required["cloudresourcemanager.googleapis.com"] will be created
  + resource "google_project_service" "required" {
      + disable_on_destroy = false
      + id                 = (known after apply)
      + project            = "my-gcp-project-prod-543224"
      + service            = "cloudresourcemanager.googleapis.com"
    }

  # module.project.google_project_service.required["compute.googleapis.com"] will be created
  + resource "google_project_service" "required" {
      + disable_on_destroy = false
      + id                 = (known after apply)
      + project            = "my-gcp-project-prod-543224"
      + service            = "compute.googleapis.com"
    }

  # module.project.google_project_service.required["logging.googleapis.com"] will be created
  + resource "google_project_service" "required" {
      + disable_on_destroy = false
      + id                 = (known after apply)
      + project            = "my-gcp-project-prod-543224"
      + service            = "logging.googleapis.com"
    }

  # module.project.google_project_service.required["monitoring.googleapis.com"] will be created
  + resource "google_project_service" "required" {
      + disable_on_destroy = false
      + id                 = (known after apply)
      + project            = "my-gcp-project-prod-543224"
      + service            = "monitoring.googleapis.com"
    }

  # module.project.google_project_service.required["run.googleapis.com"] will be created
  + resource "google_project_service" "required" {
      + disable_on_destroy = false
      + id                 = (known after apply)
      + project            = "my-gcp-project-prod-543224"
      + service            = "run.googleapis.com"
    }

  # module.project.google_project_service.required["secretmanager.googleapis.com"] will be created
  + resource "google_project_service" "required" {
      + disable_on_destroy = false
      + id                 = (known after apply)
      + project            = "my-gcp-project-prod-543224"
      + service            = "secretmanager.googleapis.com"
    }

  # module.project.google_project_service.required["servicenetworking.googleapis.com"] will be created
  + resource "google_project_service" "required" {
      + disable_on_destroy = false
      + id                 = (known after apply)
      + project            = "my-gcp-project-prod-543224"
      + service            = "servicenetworking.googleapis.com"
    }

  # module.project.google_project_service.required["sqladmin.googleapis.com"] will be created
  + resource "google_project_service" "required" {
      + disable_on_destroy = false
      + id                 = (known after apply)
      + project            = "my-gcp-project-prod-543224"
      + service            = "sqladmin.googleapis.com"
    }

  # module.project.google_project_service.required["vpcaccess.googleapis.com"] will be created
  + resource "google_project_service" "required" {
      + disable_on_destroy = false
      + id                 = (known after apply)
      + project            = "my-gcp-project-prod-543224"
      + service            = "vpcaccess.googleapis.com"
    }

  # module.secrets.google_secret_manager_secret.db_password will be created
  + resource "google_secret_manager_secret" "db_password" {
      + create_time           = (known after apply)
      + deletion_protection   = false
      + effective_annotations = (known after apply)
      + effective_labels      = {
          + "goog-terraform-provisioned" = "true"
        }
      + expire_time           = (known after apply)
      + id                    = (known after apply)
      + name                  = (known after apply)
      + project               = "my-gcp-project-prod-543224"
      + secret_id             = "db_password"
      + terraform_labels      = {
          + "goog-terraform-provisioned" = "true"
        }

      + replication {
          + auto {
            }
        }
    }

  # module.secrets.google_secret_manager_secret_version.db_password will be created
  + resource "google_secret_manager_secret_version" "db_password" {
      + create_time            = (known after apply)
      + deletion_policy        = "DELETE"
      + destroy_time           = (known after apply)
      + enabled                = true
      + id                     = (known after apply)
      + is_secret_data_base64  = false
      + name                   = (known after apply)
      + secret                 = (known after apply)
      + secret_data            = (sensitive value)
      + secret_data_wo         = (write-only attribute)
      + secret_data_wo_version = 0
      + version                = (known after apply)
    }

  # module.sql.data.google_secret_manager_secret_version.db_password will be read during apply
  # (config refers to values not yet known)
 <= data "google_secret_manager_secret_version" "db_password" {
      + create_time  = (known after apply)
      + destroy_time = (known after apply)
      + enabled      = (known after apply)
      + id           = (known after apply)
      + name         = (known after apply)
      + project      = (known after apply)
      + secret       = (known after apply)
      + secret_data  = (sensitive value)
      + version      = (known after apply)
    }

  # module.sql.google_compute_global_address.private_ip_range will be created
  + resource "google_compute_global_address" "private_ip_range" {
      + address            = (known after apply)
      + address_type       = "INTERNAL"
      + creation_timestamp = (known after apply)
      + effective_labels   = {
          + "goog-terraform-provisioned" = "true"
        }
      + id                 = (known after apply)
      + label_fingerprint  = (known after apply)
      + name               = "production-app-network-private-ip-range"
      + network            = "production-app-network"
      + prefix_length      = 16
      + project            = "my-gcp-project-prod-543224"
      + purpose            = "VPC_PEERING"
      + self_link          = (known after apply)
      + terraform_labels   = {
          + "goog-terraform-provisioned" = "true"
        }
    }

  # module.sql.google_service_networking_connection.private_vpc_connection will be created
  + resource "google_service_networking_connection" "private_vpc_connection" {
      + id                      = (known after apply)
      + network                 = (known after apply)
      + peering                 = (known after apply)
      + reserved_peering_ranges = [
          + "production-app-network-private-ip-range",
        ]
      + service                 = "servicenetworking.googleapis.com"
    }

  # module.sql.google_sql_database_instance.db will be created
  + resource "google_sql_database_instance" "db" {
      + available_maintenance_versions = (known after apply)
      + connection_name                = (known after apply)
      + database_version               = "POSTGRES_15"
      + deletion_protection            = false
      + dns_name                       = (known after apply)
      + dns_names                      = (known after apply)
      + encryption_key_name            = (known after apply)
      + first_ip_address               = (known after apply)
      + id                             = (known after apply)
      + instance_type                  = (known after apply)
      + ip_address                     = (known after apply)
      + maintenance_version            = (known after apply)
      + master_instance_name           = (known after apply)
      + name                           = "production-app-db"
      + node_count                     = (known after apply)
      + private_ip_address             = (known after apply)
      + project                        = "my-gcp-project-prod-543224"
      + psc_service_attachment_link    = (known after apply)
      + public_ip_address              = (known after apply)
      + region                         = "us-central1"
      + replica_names                  = (known after apply)
      + self_link                      = (known after apply)
      + server_ca_cert                 = (sensitive value)
      + service_account_email_address  = (known after apply)

      + replica_configuration (known after apply)

      + replication_cluster (known after apply)

      + settings {
          + activation_policy           = "ALWAYS"
          + availability_type           = "ZONAL"
          + connector_enforcement       = (known after apply)
          + disk_autoresize             = true
          + disk_autoresize_limit       = 0
          + disk_size                   = (known after apply)
          + disk_type                   = (known after apply)
          + edition                     = (known after apply)
          + effective_availability_type = (known after apply)
          + pricing_plan                = "PER_USE"
          + tier                        = "db-custom-2-7680"
          + user_labels                 = (known after apply)
          + version                     = (known after apply)

          + backup_configuration (known after apply)

          + connection_pool_config (known after apply)

          + data_cache_config (known after apply)

          + insights_config (known after apply)

          + ip_configuration {
              + ipv4_enabled    = false
              + private_network = (known after apply)
              + server_ca_mode  = (known after apply)
              + ssl_mode        = (known after apply)
            }

          + location_preference (known after apply)
        }
    }

  # module.sql.google_sql_user.db_user will be created
  + resource "google_sql_user" "db_user" {
      + host                    = (known after apply)
      + id                      = (known after apply)
      + instance                = "production-app-db"
      + name                    = "teamavail"
      + password                = (sensitive value)
      + password_wo             = (write-only attribute)
      + project                 = "my-gcp-project-prod-543224"
      + sql_server_user_details = (known after apply)
    }

  # module.vpc_connector.google_vpc_access_connector.connector will be created
  + resource "google_vpc_access_connector" "connector" {
      + connected_projects = (known after apply)
      + id                 = (known after apply)
      + ip_cidr_range      = "10.8.0.0/28"
      + machine_type       = "e2-micro"
      + max_instances      = 3
      + max_throughput     = (known after apply)
      + min_instances      = 2
      + min_throughput     = (known after apply)
      + name               = "production-app-con"
      + network            = (known after apply)
      + project            = "my-gcp-project-prod-543224"
      + region             = "us-central1"
      + self_link          = (known after apply)
      + state              = (known after apply)
    }

Plan: 33 to add, 0 to change, 0 to destroy.

─────────────────────────────────────────────────────────────────────────────

Note: You didn't use the -out option to save this plan, so Terraform can't
guarantee to take exactly these actions if you run "terraform apply" now.
